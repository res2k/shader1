  void Parser::ParseIf (Block block)
  {
    // 'if' überspringen
    NextToken();
    Expect (Lexer::ParenL);
    NextToken();
    // Bedingung parsen
    Expression conditionExpr = ParseExpression (block->GetInnerScope());
    Expect (Lexer::ParenR);
    NextToken();
    Expect (Lexer::BraceL);
    NextToken();
    // 'if'-Block erstellen, ...
    Block ifBlock = semanticsHandler.CreateBlock (block->GetInnerScope());
    // ... einlesen
    ParseBlock (ifBlock);
    Expect (Lexer::BraceR);
    NextToken();
    Block elseBlock;
    if (currentToken.typeOrID == Lexer::kwElse)
    {
      NextToken();
      Expect (Lexer::BraceL);
      NextToken();
      // 'else'-Block erstellen, ...
      elseBlock = semanticsHandler.CreateBlock (block->GetInnerScope());
      // ... einlesen
      ParseBlock (elseBlock);
      Expect (Lexer::BraceR);
      NextToken();
    }
    // Instruktion zu umgebenden Block hinzufügen
    block->AddBranching (conditionExpr, ifBlock, elseBlock);
  }
