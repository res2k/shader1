/*
    Shader1
    Copyright (c) 2017-2018 Frank Richter


    This library is free software; you can redistribute it and/or
    modify it under the terms of the wxWindows Library Licence.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

    Please see the wxWindows Library Licence for more details.
    The licence texts can be found in the source distribution files
    LICENCE-wxWindows.txt and LICENCE-LGPL.txt.
*/

#include <boost/test/unit_test.hpp>

#include "base/bit_scan.h"

#include <stdint.h>

#define BITSCAN_TEST(X, expected_msb, expected_lsb)        \
  BOOST_CHECK_EQUAL(s1::bit_scan::msb (X), expected_msb);  \
  BOOST_CHECK_EQUAL(s1::bit_scan::lsb (X), expected_lsb)

BOOST_AUTO_TEST_SUITE(BitScan)

BOOST_AUTO_TEST_CASE(BitScan32)
{
  BITSCAN_TEST(UINT32_C(0x00000001),  0,  0);
  BITSCAN_TEST(UINT32_C(0x00000002),  1,  1);
  BITSCAN_TEST(UINT32_C(0x00000004),  2,  2);
  BITSCAN_TEST(UINT32_C(0x00000008),  3,  3);
  BITSCAN_TEST(UINT32_C(0x00000010),  4,  4);
  BITSCAN_TEST(UINT32_C(0x00000020),  5,  5);
  BITSCAN_TEST(UINT32_C(0x00000040),  6,  6);
  BITSCAN_TEST(UINT32_C(0x00000080),  7,  7);
  BITSCAN_TEST(UINT32_C(0x00000100),  8,  8);
  BITSCAN_TEST(UINT32_C(0x00000200),  9,  9);
  BITSCAN_TEST(UINT32_C(0x00000400), 10, 10);
  BITSCAN_TEST(UINT32_C(0x00000800), 11, 11);
  BITSCAN_TEST(UINT32_C(0x00001000), 12, 12);
  BITSCAN_TEST(UINT32_C(0x00002000), 13, 13);
  BITSCAN_TEST(UINT32_C(0x00004000), 14, 14);
  BITSCAN_TEST(UINT32_C(0x00008000), 15, 15);
  BITSCAN_TEST(UINT32_C(0x00010000), 16, 16);
  BITSCAN_TEST(UINT32_C(0x00020000), 17, 17);
  BITSCAN_TEST(UINT32_C(0x00040000), 18, 18);
  BITSCAN_TEST(UINT32_C(0x00080000), 19, 19);
  BITSCAN_TEST(UINT32_C(0x00100000), 20, 20);
  BITSCAN_TEST(UINT32_C(0x00200000), 21, 21);
  BITSCAN_TEST(UINT32_C(0x00400000), 22, 22);
  BITSCAN_TEST(UINT32_C(0x00800000), 23, 23);
  BITSCAN_TEST(UINT32_C(0x01000000), 24, 24);
  BITSCAN_TEST(UINT32_C(0x02000000), 25, 25);
  BITSCAN_TEST(UINT32_C(0x04000000), 26, 26);
  BITSCAN_TEST(UINT32_C(0x08000000), 27, 27);
  BITSCAN_TEST(UINT32_C(0x10000000), 28, 28);
  BITSCAN_TEST(UINT32_C(0x20000000), 29, 29);
  BITSCAN_TEST(UINT32_C(0x40000000), 30, 30);
  BITSCAN_TEST(UINT32_C(0x80000000), 31, 31);

  BITSCAN_TEST(UINT32_C(0x80000001), 31,  0);
  BITSCAN_TEST(UINT32_C(0x40000002), 30,  1);
  BITSCAN_TEST(UINT32_C(0x20000004), 29,  2);
  BITSCAN_TEST(UINT32_C(0x10000008), 28,  3);
  BITSCAN_TEST(UINT32_C(0x08000010), 27,  4);
  BITSCAN_TEST(UINT32_C(0x04000020), 26,  5);
  BITSCAN_TEST(UINT32_C(0x02000040), 25,  6);
  BITSCAN_TEST(UINT32_C(0x01000080), 24,  7);
  BITSCAN_TEST(UINT32_C(0x00800100), 23,  8);
  BITSCAN_TEST(UINT32_C(0x00400200), 22,  9);
  BITSCAN_TEST(UINT32_C(0x00200400), 21, 10);
  BITSCAN_TEST(UINT32_C(0x00100800), 20, 11);
  BITSCAN_TEST(UINT32_C(0x00081000), 19, 12);
  BITSCAN_TEST(UINT32_C(0x00042000), 18, 13);
  BITSCAN_TEST(UINT32_C(0x00024000), 17, 14);
  BITSCAN_TEST(UINT32_C(0x00018000), 16, 15);
}

BOOST_AUTO_TEST_CASE(BitScan64)
{
  BITSCAN_TEST(UINT64_C(0x0000000000000001),  0,  0);
  BITSCAN_TEST(UINT64_C(0x0000000000000002),  1,  1);
  BITSCAN_TEST(UINT64_C(0x0000000000000004),  2,  2);
  BITSCAN_TEST(UINT64_C(0x0000000000000008),  3,  3);
  BITSCAN_TEST(UINT64_C(0x0000000000000010),  4,  4);
  BITSCAN_TEST(UINT64_C(0x0000000000000020),  5,  5);
  BITSCAN_TEST(UINT64_C(0x0000000000000040),  6,  6);
  BITSCAN_TEST(UINT64_C(0x0000000000000080),  7,  7);
  BITSCAN_TEST(UINT64_C(0x0000000000000100),  8,  8);
  BITSCAN_TEST(UINT64_C(0x0000000000000200),  9,  9);
  BITSCAN_TEST(UINT64_C(0x0000000000000400), 10, 10);
  BITSCAN_TEST(UINT64_C(0x0000000000000800), 11, 11);
  BITSCAN_TEST(UINT64_C(0x0000000000001000), 12, 12);
  BITSCAN_TEST(UINT64_C(0x0000000000002000), 13, 13);
  BITSCAN_TEST(UINT64_C(0x0000000000004000), 14, 14);
  BITSCAN_TEST(UINT64_C(0x0000000000008000), 15, 15);
  BITSCAN_TEST(UINT64_C(0x0000000000010000), 16, 16);
  BITSCAN_TEST(UINT64_C(0x0000000000020000), 17, 17);
  BITSCAN_TEST(UINT64_C(0x0000000000040000), 18, 18);
  BITSCAN_TEST(UINT64_C(0x0000000000080000), 19, 19);
  BITSCAN_TEST(UINT64_C(0x0000000000100000), 20, 20);
  BITSCAN_TEST(UINT64_C(0x0000000000200000), 21, 21);
  BITSCAN_TEST(UINT64_C(0x0000000000400000), 22, 22);
  BITSCAN_TEST(UINT64_C(0x0000000000800000), 23, 23);
  BITSCAN_TEST(UINT64_C(0x0000000001000000), 24, 24);
  BITSCAN_TEST(UINT64_C(0x0000000002000000), 25, 25);
  BITSCAN_TEST(UINT64_C(0x0000000004000000), 26, 26);
  BITSCAN_TEST(UINT64_C(0x0000000008000000), 27, 27);
  BITSCAN_TEST(UINT64_C(0x0000000010000000), 28, 28);
  BITSCAN_TEST(UINT64_C(0x0000000020000000), 29, 29);
  BITSCAN_TEST(UINT64_C(0x0000000040000000), 30, 30);
  BITSCAN_TEST(UINT64_C(0x0000000080000000), 31, 31);
  BITSCAN_TEST(UINT64_C(0x0000000100000000), 32, 32);
  BITSCAN_TEST(UINT64_C(0x0000000200000000), 33, 33);
  BITSCAN_TEST(UINT64_C(0x0000000400000000), 34, 34);
  BITSCAN_TEST(UINT64_C(0x0000000800000000), 35, 35);
  BITSCAN_TEST(UINT64_C(0x0000001000000000), 36, 36);
  BITSCAN_TEST(UINT64_C(0x0000002000000000), 37, 37);
  BITSCAN_TEST(UINT64_C(0x0000004000000000), 38, 38);
  BITSCAN_TEST(UINT64_C(0x0000008000000000), 39, 39);
  BITSCAN_TEST(UINT64_C(0x0000010000000000), 40, 40);
  BITSCAN_TEST(UINT64_C(0x0000020000000000), 41, 41);
  BITSCAN_TEST(UINT64_C(0x0000040000000000), 42, 42);
  BITSCAN_TEST(UINT64_C(0x0000080000000000), 43, 43);
  BITSCAN_TEST(UINT64_C(0x0000100000000000), 44, 44);
  BITSCAN_TEST(UINT64_C(0x0000200000000000), 45, 45);
  BITSCAN_TEST(UINT64_C(0x0000400000000000), 46, 46);
  BITSCAN_TEST(UINT64_C(0x0000800000000000), 47, 47);
  BITSCAN_TEST(UINT64_C(0x0001000000000000), 48, 48);
  BITSCAN_TEST(UINT64_C(0x0002000000000000), 49, 49);
  BITSCAN_TEST(UINT64_C(0x0004000000000000), 50, 50);
  BITSCAN_TEST(UINT64_C(0x0008000000000000), 51, 51);
  BITSCAN_TEST(UINT64_C(0x0010000000000000), 52, 52);
  BITSCAN_TEST(UINT64_C(0x0020000000000000), 53, 53);
  BITSCAN_TEST(UINT64_C(0x0040000000000000), 54, 54);
  BITSCAN_TEST(UINT64_C(0x0080000000000000), 55, 55);
  BITSCAN_TEST(UINT64_C(0x0100000000000000), 56, 56);
  BITSCAN_TEST(UINT64_C(0x0200000000000000), 57, 57);
  BITSCAN_TEST(UINT64_C(0x0400000000000000), 58, 58);
  BITSCAN_TEST(UINT64_C(0x0800000000000000), 59, 59);
  BITSCAN_TEST(UINT64_C(0x1000000000000000), 60, 60);
  BITSCAN_TEST(UINT64_C(0x2000000000000000), 61, 61);
  BITSCAN_TEST(UINT64_C(0x4000000000000000), 62, 62);
  BITSCAN_TEST(UINT64_C(0x8000000000000000), 63, 63);

  BITSCAN_TEST(UINT64_C(0x8000000000000001), 63,  0);
  BITSCAN_TEST(UINT64_C(0x4000000000000002), 62,  1);
  BITSCAN_TEST(UINT64_C(0x2000000000000004), 61,  2);
  BITSCAN_TEST(UINT64_C(0x1000000000000008), 60,  3);
  BITSCAN_TEST(UINT64_C(0x0800000000000010), 59,  4);
  BITSCAN_TEST(UINT64_C(0x0400000000000020), 58,  5);
  BITSCAN_TEST(UINT64_C(0x0200000000000040), 57,  6);
  BITSCAN_TEST(UINT64_C(0x0100000000000080), 56,  7);
  BITSCAN_TEST(UINT64_C(0x0080000000000100), 55,  8);
  BITSCAN_TEST(UINT64_C(0x0040000000000200), 54,  9);
  BITSCAN_TEST(UINT64_C(0x0020000000000400), 53, 10);
  BITSCAN_TEST(UINT64_C(0x0010000000000800), 52, 11);
  BITSCAN_TEST(UINT64_C(0x0008000000001000), 51, 12);
  BITSCAN_TEST(UINT64_C(0x0004000000002000), 50, 13);
  BITSCAN_TEST(UINT64_C(0x0002000000004000), 49, 14);
  BITSCAN_TEST(UINT64_C(0x0001000000008000), 48, 15);
  BITSCAN_TEST(UINT64_C(0x0000800000010000), 47, 16);
  BITSCAN_TEST(UINT64_C(0x0000400000020000), 46, 17);
  BITSCAN_TEST(UINT64_C(0x0000200000040000), 45, 18);
  BITSCAN_TEST(UINT64_C(0x0000100000080000), 44, 19);
  BITSCAN_TEST(UINT64_C(0x0000080000100000), 43, 20);
  BITSCAN_TEST(UINT64_C(0x0000040000200000), 42, 21);
  BITSCAN_TEST(UINT64_C(0x0000020000400000), 41, 22);
  BITSCAN_TEST(UINT64_C(0x0000010000800000), 40, 23);
  BITSCAN_TEST(UINT64_C(0x0000008001000000), 39, 24);
  BITSCAN_TEST(UINT64_C(0x0000004002000000), 38, 25);
  BITSCAN_TEST(UINT64_C(0x0000002004000000), 37, 26);
  BITSCAN_TEST(UINT64_C(0x0000001008000000), 36, 27);
  BITSCAN_TEST(UINT64_C(0x0000000810000000), 35, 28);
  BITSCAN_TEST(UINT64_C(0x0000000420000000), 34, 29);
  BITSCAN_TEST(UINT64_C(0x0000000240000000), 33, 30);
  BITSCAN_TEST(UINT64_C(0x0000000180000000), 32, 31);
}

BOOST_AUTO_TEST_SUITE_END()
