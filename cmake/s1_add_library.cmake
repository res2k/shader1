function(S1_GET_DEPENDENCIES output_sources output_libs)
  set(dep_obj "")
  SET(dep_other "")
  foreach(LIB ${ARGN})
    if(TARGET ${LIB})
      GET_TARGET_PROPERTY(LIBTYPE ${LIB} TYPE)
      IF("${LIBTYPE}" STREQUAL "OBJECT_LIBRARY")
        list(APPEND dep_obj $<TARGET_OBJECTS:${LIB}>)
        get_target_property(lib_depends_obj ${LIB} S1_LINK_LIBS)
        if(NOT "${lib_depends_obj}" STREQUAL "lib_depends_obj-NOTFOUND")
          S1_GET_DEPENDENCIES(extra_objs extra_deps ${lib_depends_obj})
          list(APPEND dep_obj ${extra_objs})
          list(APPEND dep_other ${extra_deps})
        endif()
      ELSE()
        LIST(APPEND dep_other ${LIB})
      ENDIF()
    else()
      list(APPEND dep_other ${LIB})
    endif()
  endforeach()
  list(REMOVE_DUPLICATES dep_obj)
  list(REMOVE_DUPLICATES dep_other)
  set(${output_sources} ${dep_obj} PARENT_SCOPE)
  set(${output_libs} ${dep_other} PARENT_SCOPE)
endfunction()

FUNCTION(s1_add_library TARGET)
  CMAKE_PARSE_ARGUMENTS(S1_LIB
    "STATIC;SHARED"
    "JOIN_PDB"
    "SOURCES;DEPENDS;LINK"
    ${ARGN})
  IF(S1_LIB_UNPARSED_ARGS)
    MESSAGE(FATAL_ERROR "Unexpected arguments to s1_add_library: ${S1_LIB_UNPARSED_ARGS}")
  ENDIF()
  IF(S1_LIB_STATIC AND S1_LIB_SHARED)
    MESSAGE(FATAL_ERROR "s1_add_library supports STATIC or SHARED or neither, but not both")
  ENDIF()
  IF(S1_LIB_STATIC)
    S1_GET_DEPENDENCIES(DEPS_OBJ DEPS_LINK ${S1_LIB_LINK})
    ADD_LIBRARY(${TARGET} STATIC ${S1_LIB_SOURCES} ${DEPS_OBJ})
    IF(DEPS_LINK)
      TARGET_LINK_LIBRARIES(${TARGET} PRIVATE ${DEPS_LINK})
    ENDIF()
  ELSEIF(S1_LIB_SHARED)
    S1_GET_DEPENDENCIES(DEPS_OBJ DEPS_LINK ${S1_LIB_LINK})
    ADD_LIBRARY(${TARGET} SHARED ${S1_LIB_SOURCES} ${DEPS_OBJ})
    IF(DEPS_LINK)
      TARGET_LINK_LIBRARIES(${TARGET} PRIVATE ${DEPS_LINK})
    ENDIF()
  ELSE()
    ADD_LIBRARY(${TARGET} OBJECT ${S1_LIB_SOURCES})
    SET_PROPERTY(TARGET ${TARGET} PROPERTY S1_LINK_LIBS ${S1_LIB_LINK})
  ENDIF()
  IF(S1_LIB_DEPENDS)
    ADD_DEPENDENCIES(${TARGET} ${S1_LIB_DEPENDS})
  ENDIF()
ENDFUNCTION()
